scriptencoding utf-8
" =================
" Author: MuCheng
" License: GPLv3
" =================
"

let g:mapleader="\<Space>"
let g:maplocalleader=','

filetype on
filetype indent on
filetype plugin on
syntax enable
set encoding=utf-8
set fileencoding=utf-8
set backspace=2
set laststatus=2
set mouse=a
set incsearch
set hlsearch
set smartcase
set autoindent
set smartindent
set autoread
set scrolloff=5
set timeoutlen=500
set ttimeoutlen=0
set number
set cursorline
set noswapfile
set showcmd
set smarttab
set linebreak
set splitbelow
set splitright
set clipboard=unnamed
set novisualbell
set ignorecase
set smartcase
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2
set foldmethod=indent
set foldlevelstart=99
set colorcolumn=0
set paste

cmap w!! w !sudo tee > /dev/null %
inoremap <C-U> <ESC>viwUea
inoremap <C-L> <ESC>viwuea
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <leader>tp gT
nnoremap <leader>tn gt
nnoremap <leader>tt :tab
nnoremap <leader>ta :tabnew<CR>
nnoremap <leader>tc :tabclose<CR>
nnoremap <leader>tl :tabs<CR>
nnoremap <leader>td :tabdo
nnoremap <leader>tF :tabfirst<CR>
nnoremap <leader>tL :tablast<CR>
nnoremap <leader>ts :tab split<CR>
noremap <silent> <leader>1 :silent! 1wincmd w<CR>
noremap <silent> <leader>2 :silent! 2wincmd w<CR>
noremap <silent> <leader>3 :silent! 3wincmd w<CR>
noremap <silent> <leader>4 :silent! 4wincmd w<CR>
noremap <silent> <leader>5 :silent! 5wincmd w<CR>
noremap <silent> <leader>6 :silent! 6wincmd w<CR>
vnoremap <silent> < <gv
vnoremap <silent> > >gv

augroup file_set
  autocmd FileType vim,yaml,json,sh,sql,dockerfile,lua
        \ setlocal fileformat=unix tabstop=2 softtabstop=2 shiftwidth=2
	autocmd FileType gitcommit
				\ setlocal spell textwidth=72 colorcolumn=79
  autocmd FileType go
        \ setlocal fileformat=unix tabstop=4 softtabstop=4 shiftwidth=4 colorcolumn=80
  autocmd FileType python
        \ setlocal fileformat=unix tabstop=4 softtabstop=4 shiftwidth=4 colorcolumn=79
  autocmd FileType htmldjango
        \ setlocal fileformat=unix tabstop=2 softtabstop=2 shiftwidth=2 colorcolumn=120
  autocmd FileType markdown
        \ setlocal fileformat=unix tabstop=4 softtabstop=4 shiftwidth=4
augroup end

augroup auto_position
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
augroup end
augroup white_space
  autocmd!
  hi BadWhitespace guifg=gray guibg=red ctermfg=gray ctermbg=red
  autocmd BufRead,BufNewFile * match BadWhitespace /\s\+$/
augroup end
augroup trim_trailing_whitespace
  autocmd!
  autocmd BufWritePre * %s/\s\+$//e
augroup END

function! PythonHeader() abort
  call setline(1, '#!/usr/bin/env python')
  call setline(2, '# -*-coding: utf-8-*-')
  normal! Goo
endfunction
function! BashHeader() abort
  call setline(1, '#!/bin/bash')
  normal! Goo
endfunction
augroup auto_set_file_head
  autocmd BufNewFile *.py call PythonHeader()
  autocmd BufNewFile *.sh call BashHeader()
augroup end

"{{{ statusline
hi User1 cterm=bold ctermfg=232 ctermbg=6
hi User2 cterm=bold ctermfg=214 ctermbg=242
hi User3 cterm=bold ctermfg=169 ctermbg=238
hi User4 cterm=bold ctermfg=250 ctermbg=238
hi User5 cterm=bold ctermfg=240 ctermbg=155
hi StatusLine cterm=bold ctermfg=231 ctermbg=238
hi StatusLineNC cterm=None ctermfg=NONE ctermbg=232

function! Gbranch()
  let l:branch = system('git rev-parse --abbrev-ref HEAD 2>/dev/null')
  return v:shell_error ? '' : ' [ '.trim(l:branch).'] '
endfunction
set statusline=%<%1*\ [%{tabpagewinnr(tabpagenr())}]\ %2*%{Gbranch()}%3*\ %m%r%w%F\ %*
set statusline+=%=%4*\ %{&filetype==''?'':'['.&filetype.']\ \|'}\ [%{&ff}]\ \|\ [%{&fenc!=''?&fenc:&enc}]\ %5*\ %P\ \|\ %l:%c%V\ %*
"}}}

"{{{ commentary
if v:version >= 703
  function! s:surroundings() abort
    return split(get(b:, 'commentary_format', substitute(substitute(substitute(
          \ &commentstring, '^$', '%s', ''), '\S\zs%s',' %s', '') ,'%s\ze\S', '%s ', '')), '%s', 1)
  endfunction

  function! s:strip_white_space(l,r,line) abort
    let [l, r] = [a:l, a:r]
    if l[-1:] ==# ' ' && stridx(a:line,l) == -1 && stridx(a:line,l[0:-2]) == 0
      let l = l[:-2]
    endif
    if r[0] ==# ' ' && (' ' . a:line)[-strlen(r)-1:] != r && a:line[-strlen(r):] == r[1:]
      let r = r[1:]
    endif
    return [l, r]
  endfunction

  function! s:go(...) abort
    if !a:0
      let &operatorfunc = matchstr(expand('<sfile>'), '[^. ]*$')
      return 'g@'
    elseif a:0 > 1
      let [lnum1, lnum2] = [a:1, a:2]
    else
      let [lnum1, lnum2] = [line("'["), line("']")]
    endif

    let [l, r] = s:surroundings()
    let uncomment = 2
    let force_uncomment = a:0 > 2 && a:3
    for lnum in range(lnum1,lnum2)
      let line = matchstr(getline(lnum),'\S.*\s\@<!')
      let [l, r] = s:strip_white_space(l,r,line)
      if len(line) && (stridx(line,l) || line[strlen(line)-strlen(r) : -1] != r)
        let uncomment = 0
      endif
    endfor

    if get(b:, 'commentary_startofline')
      let indent = '^'
    else
      let indent = '^\s*'
    endif

    let lines = []
    for lnum in range(lnum1,lnum2)
      let line = getline(lnum)
      if strlen(r) > 2 && l.r !~# '\\'
        let line = substitute(line,
              \'\M' . substitute(l, '\ze\S\s*$', '\\zs\\d\\*\\ze', '') . '\|' . substitute(r, '\S\zs', '\\zs\\d\\*\\ze', ''),
              \'\=substitute(submatch(0)+1-uncomment,"^0$\\|^-\\d*$","","")','g')
      endif
      if force_uncomment
        if line =~ '^\s*' . l
          let line = substitute(line,'\S.*\s\@<!','\=submatch(0)[strlen(l):-strlen(r)-1]','')
        endif
      elseif uncomment
        let line = substitute(line,'\S.*\s\@<!','\=submatch(0)[strlen(l):-strlen(r)-1]','')
      else
        let line = substitute(line,'^\%('.matchstr(getline(lnum1),indent).'\|\s*\)\zs.*\S\@<=','\=l.submatch(0).r','')
      endif
      call add(lines, line)
    endfor
    call setline(lnum1, lines)
    let modelines = &modelines
    try
      set modelines=0
      silent doautocmd User CommentaryPost
    finally
      let &modelines = modelines
    endtry
    return ''
  endfunction

  function! s:textobject(inner) abort
    let [l, r] = s:surroundings()
    let lnums = [line('.')+1, line('.')-2]
    for [index, dir, bound, line] in [[0, -1, 1, ''], [1, 1, line('$'), '']]
      while lnums[index] != bound && line ==# '' || !(stridx(line,l) || line[strlen(line)-strlen(r) : -1] != r)
        let lnums[index] += dir
        let line = matchstr(getline(lnums[index]+dir),'\S.*\s\@<!')
        let [l, r] = s:strip_white_space(l,r,line)
      endwhile
    endfor
    while (a:inner || lnums[1] != line('$')) && empty(getline(lnums[0]))
      let lnums[0] += 1
    endwhile
    while a:inner && empty(getline(lnums[1]))
      let lnums[1] -= 1
    endwhile
    if lnums[0] <= lnums[1]
      execute 'normal! 'lnums[0].'GV'.lnums[1].'G'
    endif
  endfunction

  command! -range -bar -bang Commentary call s:go(<line1>,<line2>,<bang>0)
  xnoremap <expr>   <Plug>Commentary     <SID>go()
  nnoremap <expr>   <Plug>Commentary     <SID>go()
  nnoremap <expr>   <Plug>CommentaryLine <SID>go() . '_'
  onoremap <silent> <Plug>Commentary        :<C-U>call <SID>textobject(get(v:, 'operator', '') ==# 'c')<CR>
  nnoremap <silent> <Plug>ChangeCommentary c:<C-U>call <SID>textobject(1)<CR>

  xmap gc  <Plug>Commentary
  nmap gc  <Plug>Commentary
  omap gc  <Plug>Commentary
  nmap gcc <Plug>CommentaryLine
  nmap gcu <Plug>Commentary<Plug>Commentary
endif
"}}}

"{{{ indentLine
let g:indentLine_enabled = 1
let g:indentLine_newVersion = get(g:,'indentLine_newVersion',v:version > 704 || v:version == 704 && has("patch792"))
let g:indentLine_char = '|'
let g:indentLine_char_list = []
let g:indentLine_first_char = (&encoding ==# "utf-8" && &term isnot# "linux" ? '¦' : '|')
let g:indentLine_indentLevel = 20
let g:indentLine_fileType = []
let g:indentLine_fileTypeExclude = ['leaderf']
let g:indentLine_bufNameExclude = []
let g:indentLine_bufTypeExclude = []
let g:indentLine_showFirstIndentLevel = 0
let g:indentLine_maxLines = 3000
let g:indentLine_setConceal = 1
let g:indentLine_faster = 0
let g:indentLine_leadingSpaceChar = (&encoding ==# "utf-8" && &term isnot# "linux" ? '˰' : '.')
let g:indentLine_leadingSpaceEnabled = 0
let g:indentLine_mysyntaxfile = fnamemodify(expand("<sfile>"), ":p:h:h")."/syntax/indentLine.vim"
let g:vim_json_conceal=0
let g:markdown_syntax_conceal=0

function! s:InitColor()
  if &term ==# "linux"
    execute "highlight Conceal cterm=bold ctermbg=NONE ctermfg=" . (&background ==# "light" ? 4 : 2)
  else
    execute "highlight Conceal cterm=NONE ctermbg=NONE ctermfg=" . (&background ==# "light" ? 249 : 239)
  endif
endfunction

function! s:SetConcealOption()
  if !g:indentLine_setConceal
    return
  endif
  if !(exists("b:indentLine_ConcealOptionSet") && b:indentLine_ConcealOptionSet)
    let b:indentLine_ConcealOptionSet = 1
    let b:indentLine_original_concealcursor = &l:concealcursor
    let b:indentLine_original_conceallevel = &l:conceallevel
    let &l:concealcursor = exists("g:indentLine_concealcursor") ? g:indentLine_concealcursor : "inc"
    let &l:conceallevel = exists("g:indentLine_conceallevel") ? g:indentLine_conceallevel : "2"
  endif
endfunction

function! s:ResetConcealOption()
  if exists("b:indentLine_ConcealOptionSet") && b:indentLine_ConcealOptionSet
    if exists("b:indentLine_original_concealcursor")
        let &l:concealcursor = b:indentLine_original_concealcursor
    endif
    if exists("b:indentLine_original_conceallevel")
        let &l:conceallevel = b:indentLine_original_conceallevel
    endif
    let b:indentLine_ConcealOptionSet = 0
  endif
endfunction

function! s:DisableOnDiff()
  if &diff
    call s:IndentLinesDisable()
    call s:LeadingSpaceDisable()
  endif
endfunction

function! s:VimEnter()
  let init_winnr = winnr()
  noautocmd windo call s:DisableOnDiff()
  noautocmd exec init_winnr . "wincmd w"
endfunction

function! s:ToggleOnDiff()
  if &diff
    call s:IndentLinesDisable()
    call s:LeadingSpaceDisable()
  else
    call s:Setup()
  endif
endfunction

function! s:IndentLinesEnable()
  let s:indentSpace = get(g:, 'indentLine_indentSpace', &l:shiftwidth == 0 ? &l:tabstop : &l:shiftwidth)
  if g:indentLine_newVersion
    if exists("b:indentLine_enabled") && b:indentLine_enabled == 0
      return
    endif

    if !exists("w:indentLine_indentLineId")
      let w:indentLine_indentLineId = []
    endif

    call s:SetConcealOption()

    if g:indentLine_showFirstIndentLevel
      call add(w:indentLine_indentLineId, matchadd('Conceal', '^ ', 0, -1, {'conceal': g:indentLine_first_char}))
    endif

    let n = len(g:indentLine_char_list)
    let level = 0
    for i in range(s:indentSpace+1, s:indentSpace * g:indentLine_indentLevel + 1, s:indentSpace)
      if n > 0
          let char = g:indentLine_char_list[level % n]
          let level += 1
      else
          let char = g:indentLine_char
      endif
      call add(w:indentLine_indentLineId, matchadd('Conceal', '^\s\+\zs\%'.i.'v ', 0, -1, {'conceal': char}))
    endfor

    return
  endif

  if exists("b:indentLine_enabled") && b:indentLine_enabled
      return
  else
    let b:indentLine_enabled = 1
  endif

  call s:SetConcealOption()

  let g:mysyntaxfile = g:indentLine_mysyntaxfile

  if g:indentLine_showFirstIndentLevel
    execute 'syntax match IndentLine /^ / containedin=ALL conceal cchar=' . g:indentLine_first_char
  endif

  if g:indentLine_faster
    execute 'syntax match IndentLineSpace /^\s\+/ containedin=ALL contains=IndentLine'
    execute 'syntax match IndentLine / \{'.(s:indentSpace-1).'}\zs / contained conceal cchar=' . g:indentLine_char
    execute 'syntax match IndentLine /\t\zs / contained conceal cchar=' . g:indentLine_char
  else
    let pattern = line('$') < g:indentLine_maxLines ? 'v' : 'c'
    for i in range(s:indentSpace+1, s:indentSpace * s:indentLine_indentLevel + 1, s:indentSpace)
        execute 'syntax match IndentLine /\%(^\s\+\)\@<=\%'.i.pattern.' / containedin=ALL conceal cchar=' . g:indentLine_char
    endfor
  endif
endfunction

function! s:IndentLinesDisable()
  if g:indentLine_newVersion
    if exists("w:indentLine_indentLineId") && ! empty(w:indentLine_indentLineId)
      for id in w:indentLine_indentLineId
        try
          call matchdelete(id)
        catch /^Vim\%((\a\+)\)\=:E80[23]/
        endtry
      endfor
      let w:indentLine_indentLineId = []
    endif

    call s:ResetConcealOption()
    return
  endif

  let b:indentLine_enabled = 0
  try
    syntax clear IndentLine
    syntax clear IndentLineSpace
  catch /^Vim\%((\a\+)\)\=:E28/	" catch error E28
  endtry
endfunction

function! s:IndentLinesToggle()
  if g:indentLine_newVersion
    if exists("w:indentLine_indentLineId") && ! empty(w:indentLine_indentLineId)
        let b:indentLine_enabled = 0
        call s:IndentLinesDisable()
    else
        let b:indentLine_enabled = 1
        call s:IndentLinesEnable()
    endif

    return
  endif

  if exists("b:indentLine_enabled") && b:indentLine_enabled
    call s:IndentLinesDisable()
  else
    call s:IndentLinesEnable()
  endif
endfunction

function! s:ResetWidth(...)
  if 0 < a:0
      noautocmd let &l:shiftwidth = a:1
  endif

  let b:indentLine_enabled = 1
  call s:IndentLinesDisable()
  call s:IndentLinesEnable()
endfunction

function! s:AutoResetWidth()
  let l:enable = get(b:, 'indentLine_enabled', g:indentLine_enabled ? s:Filter() : 0)

  let g:indentLine_autoResetWidth = get(g:, 'indentLine_autoResetWidth', 1)

  if l:enable != 1 || g:indentLine_autoResetWidth != 1
    return
  endif

  let b:indentLine_enabled = l:enable
  call s:IndentLinesDisable()
  call s:IndentLinesEnable()
endfunction

function! s:Filter()
  if index(g:indentLine_fileTypeExclude, &filetype) != -1
    return 0
  endif

  if index(g:indentLine_bufTypeExclude, &buftype) != -1
    return 0
  endif

  if len(g:indentLine_fileType) != 0 && index(g:indentLine_fileType, &filetype) == -1
    return 0
  endif

  for name in g:indentLine_bufNameExclude
    if matchstr(bufname(''), name) == bufname('')
        return 0
    endif
  endfor

  return 1
endfunction

function! s:Disable()
  if s:Filter() == 0
    call s:IndentLinesDisable()
    call s:LeadingSpaceDisable()
  endif
endfunction

function! s:Setup()
  if &filetype ==# ""
    call s:InitColor()
  endif

  if s:Filter() && g:indentLine_enabled || exists("b:indentLine_enabled") && b:indentLine_enabled
    call s:IndentLinesEnable()
  endif

  if s:Filter() && g:indentLine_leadingSpaceEnabled || exists("b:indentLine_leadingSpaceEnabled") && b:indentLine_leadingSpaceEnabled
    call s:LeadingSpaceEnable()
  endif
endfunction

function! s:LeadingSpaceEnable()
  if g:indentLine_newVersion
    if exists("b:indentLine_leadingSpaceEnabled") && b:indentLine_leadingSpaceEnabled == 0
      return
    endif

    if !exists("w:indentLine_leadingSpaceId")
      let w:indentLine_leadingSpaceId = []
    endif

    call s:SetConcealOption()

    call add(w:indentLine_leadingSpaceId, matchadd('Conceal', '\%(^\s*\)\@<= ', 0, -1, {'conceal': g:indentLine_leadingSpaceChar}))

    if exists("w:indentLine_indentLineId") && ! empty(w:indentLine_indentLineId)
      call s:ResetWidth()
    endif

    return
  endif

  if g:indentLine_faster
    echoerr 'LeadingSpace can not be shown when g:indentLine_faster == 1'
    return
  endif
  let g:mysyntaxfile = g:indentLine_mysyntaxfile
  let b:indentLine_leadingSpaceEnabled = 1
  call s:SetConcealOption()
  execute 'syntax match IndentLineLeadingSpace /\%(^\s*\)\@<= / containedin=ALLBUT,IndentLine conceal cchar=' . g:indentLine_leadingSpaceChar
endfunction

function! s:LeadingSpaceDisable()
  if g:indentLine_newVersion
    if exists("w:indentLine_leadingSpaceId") && ! empty(w:indentLine_leadingSpaceId)
      for id in w:indentLine_leadingSpaceId
        try
          call matchdelete(id)
        catch /^Vim\%((\a\+)\)\=:E80[23]/
        endtry
      endfor
      let w:indentLine_leadingSpaceId = []
    endif

    return
  endif

  let b:indentLine_leadingSpaceEnabled = 0
  try
    syntax clear IndentLineLeadingSpace
  catch /^Vim\%((\a\+)\)\=:E28/   " catch error E28
  endtry
endfunction

function! s:LeadingSpaceToggle()
  if g:indentLine_newVersion
    if exists("w:indentLine_leadingSpaceId") && ! empty(w:indentLine_leadingSpaceId)
        let b:indentLine_leadingSpaceEnabled = 0
        call s:LeadingSpaceDisable()
    else
        let b:indentLine_leadingSpaceEnabled = 1
        call s:LeadingSpaceEnable()
    endif

    return
  endif

  if exists("b:indentLine_leadingSpaceEnabled") && b:indentLine_leadingSpaceEnabled
    call s:LeadingSpaceDisable()
  else
    call s:LeadingSpaceEnable()
  endif
endfunction

augroup indentLine
  autocmd!
  if g:indentLine_newVersion
    autocmd BufRead,BufNewFile,ColorScheme,Syntax * call s:InitColor()
    if exists("##WinNew")
        autocmd WinNew * call s:Setup()
    endif
    autocmd BufWinEnter * call s:IndentLinesDisable() | call s:LeadingSpaceDisable() | call s:Setup()
    autocmd FileType * call s:Disable()
    if exists("##OptionSet")
        autocmd OptionSet diff call s:ToggleOnDiff()
        autocmd OptionSet shiftwidth,tabstop noautocmd call s:AutoResetWidth()
    endif
    autocmd VimEnter * call s:VimEnter()
  else
    autocmd BufWinEnter * call s:Setup()
    autocmd User * if exists("b:indentLine_enabled") || exists("b:indentLine_leadingSpaceEnabled") |
                    \ call s:Setup() | endif
    autocmd BufRead,BufNewFile,ColorScheme,Syntax * call s:InitColor()
    autocmd BufUnload * let b:indentLine_enabled = 0 | let b:indentLine_leadingSpaceEnabled = 0
    autocmd SourcePre $VIMRUNTIME/syntax/nosyntax.vim doautocmd indentLine BufUnload
    autocmd FileChangedShellPost * doautocmd indentLine BufUnload | call s:Setup()
    if exists("##OptionSet")
        autocmd OptionSet diff call s:ToggleOnDiff()
        autocmd OptionSet shiftwidth,tabstop noautocmd call s:AutoResetWidth()
    endif
    autocmd VimEnter * call s:VimEnter()
  endif
augroup END

command! -nargs=? IndentLinesReset call s:ResetWidth(<f-args>)
command! -bar IndentLinesToggle call s:IndentLinesToggle()
if g:indentLine_newVersion
  command! -bar Indentlinesenable let b:indentline_enabled = 1 | call s:Indentlinesenable()
  command! -bar Indentlinesdisable let b:indentline_enabled = 0 | call s:Indentlinesdisable()
  command! -bar Leadingspaceenable let b:indentline_leadingspaceenabled = 1 | call s:Leadingspaceenable()
  command! -bar Leadingspacedisable let b:indentline_leadingspaceenabled = 0 | call s:Leadingspacedisable()
else
  command! -bar Indentlinesenable call s:indentlinesenable()
  command! -bar Indentlinesdisable call s:indentlinesdisable()
  command! -bar Leadingspaceenable call s:leadingspaceenable()
  command! -bar Leadingspacedisable call s:leadingspacedisable()
endif
command! LeadingSpaceToggle call s:LeadingSpaceToggle()
"}}}


" vim:et:norl:tw=78:ts=8:ft=vim:fdm=marker:fmr={{{,}}}
