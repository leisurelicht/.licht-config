" =================
" vimrc --- vim entry file
" Author: MuCheng
" License: GPLv3
" =================
"
set encoding=utf-8
scriptencoding utf-8

let g:mapleader="\<Space>"
let g:maplocalleader=','
filetype on
filetype indent on
filetype plugin on
syntax enable
syntax on
set backspace=2
set laststatus=2
set mouse=a
set incsearch
set hlsearch
set smartcase
set autoindent
set smartindent
set autoread
set scrolloff=5
set timeoutlen=500
set ttimeoutlen=0
set number
set cursorline
set noswapfile
set showcmd
set smarttab
set linebreak
set splitbelow
set splitright
set clipboard=unnamed
set novisualbell
set ignorecase
set smartcase
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2
set foldmethod=indent
set foldlevelstart=99
set colorcolumn=0
set paste

cmap w!! w !sudo tee > /dev/null %
inoremap <C-U> <ESC>viwUea
inoremap <C-L> <ESC>viwuea
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <leader>tp gT
nnoremap <leader>tn gt
nnoremap <leader>tt :tab
nnoremap <leader>ta :tabnew<CR>
nnoremap <leader>tc :tabclose<CR>
nnoremap <leader>tl :tabs<CR>
nnoremap <leader>td :tabdo
nnoremap <leader>tF :tabfirst<CR>
nnoremap <leader>tL :tablast<CR>
nnoremap <leader>ts :tab split<CR>
noremap <silent> <leader>1 :silent! 1wincmd w<CR>
noremap <silent> <leader>2 :silent! 2wincmd w<CR>
noremap <silent> <leader>3 :silent! 3wincmd w<CR>
noremap <silent> <leader>4 :silent! 4wincmd w<CR>
noremap <silent> <leader>5 :silent! 5wincmd w<CR>
noremap <silent> <leader>6 :silent! 6wincmd w<CR>
vnoremap <silent> < <gv
vnoremap <silent> > >gv

augroup file_set
  autocmd FileType vim,yaml,json,sh,sql,dockerfile,lua
        \ setlocal fileformat=unix tabstop=2 softtabstop=2 shiftwidth=2
	autocmd FileType gitcommit
				\ setlocal spell textwidth=72 colorcolumn=79
  autocmd FileType go
        \ setlocal fileformat=unix tabstop=4 softtabstop=4 shiftwidth=4 colorcolumn=80
  autocmd FileType python
        \ setlocal fileformat=unix tabstop=4 softtabstop=4 shiftwidth=4 colorcolumn=79
  autocmd FileType htmldjango
        \ setlocal fileformat=unix tabstop=2 softtabstop=2 shiftwidth=2 colorcolumn=120
  autocmd FileType markdown
        \ setlocal fileformat=unix tabstop=4 softtabstop=4 shiftwidth=4
augroup end

augroup auto_position
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
augroup end
augroup white_space
  autocmd!
  hi BadWhitespace guifg=gray guibg=red ctermfg=gray ctermbg=red
  autocmd BufRead,BufNewFile * match BadWhitespace /\s\+$/
augroup end
augroup trim_trailing_whitespace
  autocmd!
  autocmd BufWritePre * %s/\s\+$//e
augroup END

function! PythonHeader() abort
  call setline(1, '#!/usr/bin/env python')
  call setline(2, '# -*-coding: utf-8-*-')
  normal! Goo
endfunction
function! BashHeader() abort
  call setline(1, '#!/bin/bash')
  normal! Goo
endfunction
augroup auto_set_file_head
  autocmd BufNewFile *.py call PythonHeader()
  autocmd BufNewFile *.sh call BashHeader()
augroup end

hi User1 cterm=bold ctermfg=232 ctermbg=6
hi User2 cterm=bold ctermfg=214 ctermbg=242
hi User3 cterm=bold ctermfg=169 ctermbg=238
hi User4 cterm=bold ctermfg=250 ctermbg=238
hi User5 cterm=bold ctermfg=240 ctermbg=155
hi StatusLine cterm=bold ctermfg=231 ctermbg=238
hi StatusLineNC cterm=None ctermfg=NONE ctermbg=232

function! Git_branch()
  let l:branch = system('git rev-parse --abbrev-ref HEAD 2>/dev/null')
  return v:shell_error ? '' : ' [î‚  '.trim(l:branch).'] '
endfunction
func File_type()
  let l:filt_type = &filetype
  return l:filt_type == '' ? '' : ' ['.l:filt_type.'] |'
endfunc

set statusline=%<%1*\ [%{tabpagewinnr(tabpagenr())}]\ %2*%{Git_branch()}%3*\ %m%r%w%F\ %*
set statusline+=%=
set statusline+=%4*\ %{File_type()}\ [%{&ff}]\ \|\ [%{&fenc!=''?&fenc:&enc}]\ %5*\ %P\ \|\ %l:%c%V\ %*



if v:version >= 703
  function! s:surroundings() abort
    return split(get(b:, 'commentary_format', substitute(substitute(substitute(
          \ &commentstring, '^$', '%s', ''), '\S\zs%s',' %s', '') ,'%s\ze\S', '%s ', '')), '%s', 1)
  endfunction

  function! s:strip_white_space(l,r,line) abort
    let [l, r] = [a:l, a:r]
    if l[-1:] ==# ' ' && stridx(a:line,l) == -1 && stridx(a:line,l[0:-2]) == 0
      let l = l[:-2]
    endif
    if r[0] ==# ' ' && (' ' . a:line)[-strlen(r)-1:] != r && a:line[-strlen(r):] == r[1:]
      let r = r[1:]
    endif
    return [l, r]
  endfunction

  function! s:go(...) abort
    if !a:0
      let &operatorfunc = matchstr(expand('<sfile>'), '[^. ]*$')
      return 'g@'
    elseif a:0 > 1
      let [lnum1, lnum2] = [a:1, a:2]
    else
      let [lnum1, lnum2] = [line("'["), line("']")]
    endif

    let [l, r] = s:surroundings()
    let uncomment = 2
    let force_uncomment = a:0 > 2 && a:3
    for lnum in range(lnum1,lnum2)
      let line = matchstr(getline(lnum),'\S.*\s\@<!')
      let [l, r] = s:strip_white_space(l,r,line)
      if len(line) && (stridx(line,l) || line[strlen(line)-strlen(r) : -1] != r)
        let uncomment = 0
      endif
    endfor

    if get(b:, 'commentary_startofline')
      let indent = '^'
    else
      let indent = '^\s*'
    endif

    let lines = []
    for lnum in range(lnum1,lnum2)
      let line = getline(lnum)
      if strlen(r) > 2 && l.r !~# '\\'
        let line = substitute(line,
              \'\M' . substitute(l, '\ze\S\s*$', '\\zs\\d\\*\\ze', '') . '\|' . substitute(r, '\S\zs', '\\zs\\d\\*\\ze', ''),
              \'\=substitute(submatch(0)+1-uncomment,"^0$\\|^-\\d*$","","")','g')
      endif
      if force_uncomment
        if line =~ '^\s*' . l
          let line = substitute(line,'\S.*\s\@<!','\=submatch(0)[strlen(l):-strlen(r)-1]','')
        endif
      elseif uncomment
        let line = substitute(line,'\S.*\s\@<!','\=submatch(0)[strlen(l):-strlen(r)-1]','')
      else
        let line = substitute(line,'^\%('.matchstr(getline(lnum1),indent).'\|\s*\)\zs.*\S\@<=','\=l.submatch(0).r','')
      endif
      call add(lines, line)
    endfor
    call setline(lnum1, lines)
    let modelines = &modelines
    try
      set modelines=0
      silent doautocmd User CommentaryPost
    finally
      let &modelines = modelines
    endtry
    return ''
  endfunction

  function! s:textobject(inner) abort
    let [l, r] = s:surroundings()
    let lnums = [line('.')+1, line('.')-2]
    for [index, dir, bound, line] in [[0, -1, 1, ''], [1, 1, line('$'), '']]
      while lnums[index] != bound && line ==# '' || !(stridx(line,l) || line[strlen(line)-strlen(r) : -1] != r)
        let lnums[index] += dir
        let line = matchstr(getline(lnums[index]+dir),'\S.*\s\@<!')
        let [l, r] = s:strip_white_space(l,r,line)
      endwhile
    endfor
    while (a:inner || lnums[1] != line('$')) && empty(getline(lnums[0]))
      let lnums[0] += 1
    endwhile
    while a:inner && empty(getline(lnums[1]))
      let lnums[1] -= 1
    endwhile
    if lnums[0] <= lnums[1]
      execute 'normal! 'lnums[0].'GV'.lnums[1].'G'
    endif
  endfunction

  command! -range -bar -bang Commentary call s:go(<line1>,<line2>,<bang>0)
  xnoremap <expr>   <Plug>Commentary     <SID>go()
  nnoremap <expr>   <Plug>Commentary     <SID>go()
  nnoremap <expr>   <Plug>CommentaryLine <SID>go() . '_'
  onoremap <silent> <Plug>Commentary        :<C-U>call <SID>textobject(get(v:, 'operator', '') ==# 'c')<CR>
  nnoremap <silent> <Plug>ChangeCommentary c:<C-U>call <SID>textobject(1)<CR>

  xmap gc  <Plug>Commentary
  nmap gc  <Plug>Commentary
  omap gc  <Plug>Commentary
  nmap gcc <Plug>CommentaryLine
  nmap gcu <Plug>Commentary<Plug>Commentary
endif

" vim:et:norl:tw=78:ts=8:ft=vim:
