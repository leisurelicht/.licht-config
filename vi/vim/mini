" =================
" vimrc --- vim entry file
" Author: MuCheng
" License: GPLv3
" =================
"
set encoding=utf-8
scriptencoding utf-8

let g:mapleader="\<Space>"
let g:maplocalleader=','
filetype on
filetype indent on
filetype plugin on
syntax enable
syntax on
set backspace=2
set laststatus=2
set mouse=a
set incsearch
set hlsearch
set smartcase
set autoindent
set smartindent
set autoread
set scrolloff=5
set timeoutlen=500
set ttimeoutlen=0
set number
set cursorline
set noswapfile
set showcmd
set smarttab
set linebreak
set splitbelow
set splitright
set clipboard=unnamed
set novisualbell
set ignorecase
set smartcase
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2
set foldmethod=indent
set foldlevelstart=99
set colorcolumn=0

cmap w!! w !sudo tee > /dev/null %
inoremap <C-U> <ESC>viwUea
inoremap <C-L> <ESC>viwuea
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <leader>tp gT
nnoremap <leader>tn gt
nnoremap <leader>tt :tab
nnoremap <leader>ta :tabnew<CR>
nnoremap <leader>tc :tabclose<CR>
nnoremap <leader>tl :tabs<CR>
nnoremap <leader>td :tabdo
nnoremap <leader>tF :tabfirst<CR>
nnoremap <leader>tL :tablast<CR>
nnoremap <leader>ts :tab split<CR>
noremap <silent> <leader>1 :silent! 1wincmd w<CR>
noremap <silent> <leader>2 :silent! 2wincmd w<CR>
noremap <silent> <leader>3 :silent! 3wincmd w<CR>
noremap <silent> <leader>4 :silent! 4wincmd w<CR>
noremap <silent> <leader>5 :silent! 5wincmd w<CR>
noremap <silent> <leader>6 :silent! 6wincmd w<CR>
vnoremap <silent> < <gv
vnoremap <silent> > >gv

augroup auto_position
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
augroup end
augroup white_space
  hi BadWhitespace guifg=gray guibg=red ctermfg=gray ctermbg=red
  autocmd BufRead,BufNewFile * match BadWhitespace /\s\+$/
augroup end
augroup set_gitcommit
  autocmd FileType gitcommit setlocal spell textwidth=72 colorcolumn=79
augroup end

function! PythonHeader() abort
  call setline(1, '#!/usr/bin/env python')
  call setline(2, '# -*-coding: utf-8-*-')
  normal! Goo
endfunction
function! BashHeader() abort
  call setline(1, '#!/bin/bash')
  normal! Goo
endfunction
augroup auto_set_file_head
  autocmd BufNewFile *.py call PythonHeader()
  autocmd BufNewFile *.sh call BashHeader()
augroup end

augroup file_set
  autocmd FileType vim, yaml, json, sh, sql, dockerfile, lua
        \ setlocal fileformat=unix | setlocal tabstop=2 | setlocal softtabstop=2 | setlocal shiftwidth=2 
  autocmd FileType go
        \ setlocal fileformat=unix | setlocal tabstop=4 | setlocal softtabstop=4 | setlocal shiftwidth=4 | setlocal colorcolumn=80 
  autocmd FileType python
        \ setlocal fileformat=unix | setlocal tabstop=4 | setlocal softtabstop=4 | setlocal shiftwidth=4 | setlocal colorcolumn=79 
  autocmd FileType htmldjango
        \ setlocal fileformat=unix | setlocal tabstop=2 | setlocal softtabstop=2 | setlocal shiftwidth=2 | setlocal colorcolumn=120 
  autocmd FileType markdown
        \ setlocal fileformat=unix | setlocal tabstop=4 | setlocal softtabstop=4 | setlocal shiftwidth=4 
augroup end

hi User1 cterm=bold ctermfg=232 ctermbg=6
hi User2 cterm=bold ctermfg=214 ctermbg=242
hi User3 cterm=bold ctermfg=169 ctermbg=238
hi User4 cterm=bold ctermfg=250 ctermbg=238
hi User5 cterm=bold ctermfg=240 ctermbg=155
hi StatusLine cterm=bold ctermfg=231 ctermbg=238
hi StatusLineNC cterm=None ctermfg=NONE ctermbg=232

function! Git_branch()
  let l:branch = system('git rev-parse --abbrev-ref HEAD 2>/dev/null')
  return v:shell_error ? ' [ NoGit ] ' : ' [î‚  '.trim(l:branch).'] '
endfunction
func File_type()
  let l:filt_type = &filetype
  return l:filt_type == '' ? '' : l:filt_type.' |'
endfunc

set statusline=%<%1*\ [%{tabpagewinnr(tabpagenr())}]\ %2*%{Git_branch()}%3*\ %m%r%w%F\ %*
set statusline+=%=					  
set statusline+=%4*\ %{File_type()}\ [%{&ff}]\ \|\ [%{&fenc!=''?&fenc:&enc}]\ %5*\ %P\ \|\ %l:%c%V\ %*  	   

" vim:tw=78:ts=8:noet:ft=vim:norl:
